<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>回忆积木小屋</title>
  
  <subtitle>多一点时间多一点爱</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://geniuslight.github.io/"/>
  <updated>2018-05-27T07:34:08.434Z</updated>
  <id>https://geniuslight.github.io/</id>
  
  <author>
    <name>light</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在南京瞎逛系列1</title>
    <link href="https://geniuslight.github.io/2018/05/26/InNanjingSeries1/"/>
    <id>https://geniuslight.github.io/2018/05/26/InNanjingSeries1/</id>
    <published>2018-05-26T08:00:42.000Z</published>
    <updated>2018-05-27T07:34:08.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一场从南京江北出发的旅行"><a href="#一场从南京江北出发的旅行" class="headerlink" title="一场从南京江北出发的旅行"></a>一场从南京江北出发的旅行</h1><p>马上就要毕业，感觉离开南京去了上海很难有机会在这座城市安静的呆上几天，这时又想到大学四年对于南京各个地方的记忆是那么的匮乏，感觉到一阵遗憾，所以趁着大四这段悠闲的时光，开始自己的南京瞎逛之旅。</p><p>游玩的路线是：中山码头——浦口火车站——南京工业大学—— 绿博园</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax2x.com/2018/05/26/22AZp.png" alt="22AZp.png" title="">                </div>                <div class="image-caption">22AZp.png</div>            </figure><p>大致的想法是先坐车跑到长江边上，去看看曾经的中山码头，感受一下轮渡，坐轮渡到江北后，再顺路逛回学校。因为事先没有好好规划，而且是一个人出去瞎逛，所以感觉十分轻松，没有要完成任务的感觉，自己也可以探索一些觉得有意思的地方，一路上想停下来了，就走走看看。</p><h2 id="中山码头和浦口火车站"><a href="#中山码头和浦口火车站" class="headerlink" title="中山码头和浦口火车站"></a>中山码头和浦口火车站</h2><p>中山码头的风格和具有民国的风格，作为曾经一种重要的交通工具，他的出现据说可以追溯到1910年。在1925年比较重要的事情是中山先生的遗体是通过铁路到浦口火车站后，经过轮渡从浦口码头到中山码头进入南京城，因此码头的名字被叫做中山码头，也是对伟人的一种纪念。在长江大桥开通以前，中山码头是很重要的枢纽，如今也发挥着它的作用，去坐轮渡的时候，轮船的一楼全是小电驴，二楼也有很多人。</p><p>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://simimg.com/i/22vJR" alt="22vJR.md.jpg](https://s1.ax2x.com/2018/05/26/22vJR.md.jpg)" title="">                </div>                <div class="image-caption">22vJR.md.jpg](https://s1.ax2x.com/2018/05/26/22vJR.md.jpg)</div>            </figure></p><p>相比中山码头，江对面的浦口码头略显破败。在江的南北，就仿佛是两个世界，江南可见高楼林立，江北是破败的建筑，只是可见昔日的风光。街上的行人寥寥无几，还看到步履蹒跚的老人在巷子中行走，让我觉得突然一江之隔便是城乡之隔，这种巨大的落差十分震撼。</p><p>长江南岸</p><p>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://simimg.com/i/22hXd" alt="22hXd.md.jpg](https://s1.ax2x.com/2018/05/26/22hXd.md.jpg)" title="">                </div>                <div class="image-caption">22hXd.md.jpg](https://s1.ax2x.com/2018/05/26/22hXd.md.jpg)</div>            </figure></p><p>长江北岸</p><p>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://simimg.com/i/22WTS" alt="22WTS.md.jpg](https://s1.ax2x.com/2018/05/26/22WTS.md.jpg)" title="">                </div>                <div class="image-caption">22WTS.md.jpg](https://s1.ax2x.com/2018/05/26/22WTS.md.jpg)</div>            </figure></p><p>从浦口码头下来，没走几步就看到了浦口火车站，现在的浦口火车站（也叫南京北站）已经不再发挥它的功能，成为了被保护的文物，火车站建筑的屋顶上还长草了，让我怀疑此处是不是被遗忘了的文物。在火车站的背后不远处便是铁路，一两节车厢还停止在铁轨上，放佛在述说昔日此地的繁华。想走近去看的时候，别人拒绝了，所以也就只能远远的观看了一番。</p><p>火车站建筑  [<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://simimg.com/i/22cOi" alt="22cOi.md.jpg](https://s1.ax2x.com/2018/05/26/22cOi.md.jpg)" title="">                </div>                <div class="image-caption">22cOi.md.jpg](https://s1.ax2x.com/2018/05/26/22cOi.md.jpg)</div>            </figure></p><p>破败火车站建筑后方的猫（十分怕生） <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax2x.com/2018/05/26/22iia.md.jpg" alt="22iia.md.jpg" title="">                </div>                <div class="image-caption">22iia.md.jpg</div>            </figure></p><p>火车进站处</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax2x.com/2018/05/26/22bU9.md.jpg" alt="22bU9.md.jpg" title="">                </div>                <div class="image-caption">22bU9.md.jpg</div>            </figure><p>远远看着火车<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax2x.com/2018/05/26/22dJh.md.jpg" alt="22dJh.md.jpg" title="">                </div>                <div class="image-caption">22dJh.md.jpg</div>            </figure></p><h2 id="南京工业大学"><a href="#南京工业大学" class="headerlink" title="南京工业大学"></a>南京工业大学</h2><p>在浦口火车站瞎逛了半个小时后，途径浦口公园后很快就找到了公交车站，于是坐上了去南京绿博园的公交车。在旅途中，发现会途径南京工业大学，想起自己还有学妹在此地念书，于是果断下车，去南京工业大学江浦校区一逛。</p><p>南京工业大学给我的感觉像是一座巨大的公园，学校的教学楼实验室就置身于这美丽的仙境。南京工业大学处于山中，所以学校内有十分陡峭的山坡，学校内便是禁止骑车，全程靠走，学校又大，真的很累。听学妹介绍了一处处进景点，在看到一个很大的湖泊后，学妹带我去看了更大的湖泊，每个湖泊我都觉得比南大的漂亮许多（我觉得是因为他们学校有园林专业的原因，虽然学妹没有认同我233）。在学校中甚至有孔雀，还有露天的音乐广场，每一处都是十分美丽的景色，看的我都忘记了拍照。不过在经过校史博物馆时，还是拍下了奇葩的建筑。下细上粗的造型，还十分庄严地配上了工大的校徽，但是给我一种说不出的奇怪感觉，这种奇特的建筑，真的是第一次见。</p><p>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://simimg.com/i/2q2mA" alt="2q2mA.md.jpg](https://s1.ax2x.com/2018/05/27/2q2mA.md.jpg)" title="">                </div>                <div class="image-caption">2q2mA.md.jpg](https://s1.ax2x.com/2018/05/27/2q2mA.md.jpg)</div>            </figure></p><p>和学妹一起在食堂吃了午饭，听学妹谈及大学的生活，不得不感慨自己的生活真的是太单调了。在外靠朋友，十分感谢学妹招待！！！</p><h2 id="南京绿博园"><a href="#南京绿博园" class="headerlink" title="南京绿博园"></a>南京绿博园</h2><p>绿博园就是一个公园了，一个十分巨大的公园，总共面积有2千多亩。满园大都是植物，可惜很多不认识……一些建筑也有西方的风格，但是一些十分有名的建筑由于时间原因（时间不够）、计划原因（在园内瞎逛）和体力原因（走的很累，后来发现能骑车），没有能够去一一参观。</p><p>整个园区规划十分清晰，但是等我去的时候，发现荷兰园的郁金香凋谢了，花海的花开的不是很盛，总之没有看到十分美丽的景色。不过走在其中，仿佛离开了南京这座城市，园内树木郁郁葱葱，鸟儿叽叽喳喳，真正感受到了大自然存在。在南京有这种地方的存在，实在是南京人的福分。放几张照片，虽然拍的不好，但是感受一下吧。</p><p>  [<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://simimg.com/i/22TMn" alt="22TMn.md.jpg](https://s1.ax2x.com/2018/05/26/22TMn.md.jpg)" title="">                </div>                <div class="image-caption">22TMn.md.jpg](https://s1.ax2x.com/2018/05/26/22TMn.md.jpg)</div>            </figure></p><p>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://simimg.com/i/22XeE" alt="22XeE.md.jpg](https://s1.ax2x.com/2018/05/26/22XeE.md.jpg)" title="">                </div>                <div class="image-caption">22XeE.md.jpg](https://s1.ax2x.com/2018/05/26/22XeE.md.jpg)</div>            </figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一个人出去逛的感觉就是很爽，没有丝毫的负担，没有计划感受到了很多新奇，有了更大的自由度，但是也错过了停留地方的一些景点。有时间了继续逛南京，希望在毕业前能够在脑海中勾勒出一个生动的南京的存在。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一场从南京江北出发的旅行&quot;&gt;&lt;a href=&quot;#一场从南京江北出发的旅行&quot; class=&quot;headerlink&quot; title=&quot;一场从南京江北出发的旅行&quot;&gt;&lt;/a&gt;一场从南京江北出发的旅行&lt;/h1&gt;&lt;p&gt;马上就要毕业，感觉离开南京去了上海很难有机会在这座城市安静的
      
    
    </summary>
    
      <category term="随笔" scheme="https://geniuslight.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://geniuslight.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="游玩" scheme="https://geniuslight.github.io/tags/%E6%B8%B8%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title>IICEE526服务器管理</title>
    <link href="https://geniuslight.github.io/2018/04/04/IICEE526%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%A1%E7%90%86/"/>
    <id>https://geniuslight.github.io/2018/04/04/IICEE526服务器管理/</id>
    <published>2018-04-04T08:00:42.000Z</published>
    <updated>2018-04-29T07:58:27.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器的硬件配置和使用注意"><a href="#服务器的硬件配置和使用注意" class="headerlink" title="服务器的硬件配置和使用注意"></a>服务器的硬件配置和使用注意</h1><ul><li>GPU：GTX1080TI AERO 11G（4块）</li><li>CPU：Intel E5-2678V3 （2块）</li><li>内存：DDR4 RECC 共64G</li><li>硬盘：机械硬盘 4T（2块）SSD 500G</li></ul><p>使用时候个人觉得要注意：</p><ul><li>先观察GPU有没有人在使用，如果贸然使用，可能会杀死别人在跑的程序</li><li>安装软件，注意选择版本，比如tensorfolw不同版本对cuda和cudnn的版本要求不一样，一般会根据cuda来安装相应版本的深度学习框架</li><li>谨慎使用root权限，可以的话，使用普通用户权限</li><li>能不重启服务器，就不要重启，重启是使用<strong>who</strong>和<strong>ps aux</strong> 指令，查看最近用户登入时间和程序运行</li><li>python使用的时候，使用virtualenv，anaconda等工具，管理好包的安装</li></ul><h1 id="服务器管理"><a href="#服务器管理" class="headerlink" title="服务器管理"></a>服务器管理</h1><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>如果需要使用，找root管理员开账号，相关常用的命令有</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加用户，</span></span><br><span class="line">adduser 你的用户名</span><br><span class="line"><span class="meta">#</span><span class="bash">切换用户</span></span><br><span class="line">su 需要切换的用户名</span><br></pre></td></tr></table></figure><p>平时操作养成在非root权限下操作的习惯</p><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><p>查看磁盘空间命令如下</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">df -h</span></span><br></pre></td></tr></table></figure><p>/ 目录挂载的是SSD，所以只有500G内存。/home/sdb，/home/sdc 分别挂载的是2块4T硬盘</p><p>请选择到/home/sdb或者/home/sbc下创建自己的目录，并且在自己创建目录下存放数据，不要默认在/home/你的用户名  文件下操作，这样很快占满硬盘空间。如果需要方便，可以创建软链接，指向某个位置。</p><p>综上，比如说开启新用户（sample）的流程为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加用户，会需要你设置密码，密码设置好后，回车就行</span></span><br><span class="line">adduser sample</span><br><span class="line"><span class="meta">#</span><span class="bash">到4T硬盘挂载目录下创建你的目录</span></span><br><span class="line">mkdir /home/sdb/sample_space</span><br><span class="line"><span class="meta">#</span><span class="bash">创建软连接到用户目录下</span></span><br><span class="line">ln -s /home/sdb/sample_space /home/sample</span><br><span class="line"><span class="meta">#</span><span class="bash">可以方便地 在/home/sample/sample_space访问</span></span><br></pre></td></tr></table></figure><h1 id="服务器连接"><a href="#服务器连接" class="headerlink" title="服务器连接"></a>服务器连接</h1><h2 id="跑去办公室"><a href="#跑去办公室" class="headerlink" title="跑去办公室"></a>跑去办公室</h2><p>打开显示屏即可操作，切换到自己用户名再进行操作</p><h2 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h2><p>使用ssh连接，没有界面，但是会十分流畅</p><p>在windows上，可以使用软件进行管理连接，比如说<a href="https://www.netsarang.com/products/xsh_overview.html" target="_blank" rel="noopener">xshell</a></p><p>在linux上，可以在终端之间输入：ssh 用户名@IP地址</p><p>使用的都是默认端口22，如果你需要，可以自己改端口</p><h2 id="vnc连接（暂时不支持）"><a href="#vnc连接（暂时不支持）" class="headerlink" title="vnc连接（暂时不支持）"></a>vnc连接（暂时不支持）</h2><p>使用vnc连接，可以使用界面</p><p>服务器的<a href="https://geniuslight.github.io/2017/12/20/%E7%99%BB%E9%99%86%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A1%8C%E9%9D%A2/">vnc安装过程</a>(读一下有助于更好使用！)</p><p>widows和linux都可以下载<a href="https://www.realvnc.com/en/connect/download/viewer/" target="_blank" rel="noopener">客户端</a> 。使用十分简单，但是在网络不是很畅通的时候，会比较卡。</p><p>anaconda3中有dbus-launch，会和vnc桌面发生冲突，可能导致终端无法打开，所以不要把anacoda3的path添加到环境变量中。</p><h3 id="管理vnc账号和自动登陆"><a href="#管理vnc账号和自动登陆" class="headerlink" title="管理vnc账号和自动登陆"></a>管理vnc账号和自动登陆</h3><p>参看教程： <a href="https://geniuslight.github.io/2018/03/13/vncserver%E5%A4%9A%E7%94%A8%E6%88%B7%E5%90%AF%E5%8A%A8/">vncserver多用户启动</a></p><h2 id="teamviewer连接"><a href="#teamviewer连接" class="headerlink" title="teamviewer连接"></a>teamviewer连接</h2><p>服务端teamviewer相关命令</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#teamviewer启动</span></span><br><span class="line">sudo teamviewer <span class="comment">--daemon start</span></span><br><span class="line"><span class="comment">#teamviewer关闭</span></span><br><span class="line">sudo teamviewer <span class="comment">--daemon stop</span></span><br><span class="line"><span class="comment">#获得连接的ID</span></span><br><span class="line">teamviewer <span class="comment">--info print id</span></span><br><span class="line"><span class="comment">#设置密码</span></span><br><span class="line"> sudo teamviewer <span class="comment">--passwd [NEWPASSWORD]</span></span><br></pre></td></tr></table></figure><p>在服务器端root用户开启后，在各个桌面下可以使用同样ID和密码进行连接，下载客户端即可连接。</p><h2 id="在外网使用服务器"><a href="#在外网使用服务器" class="headerlink" title="在外网使用服务器"></a>在外网使用服务器</h2><p>参看教程：<a href="https://geniuslight.github.io/2018/01/30/%E8%BD%AC%E8%BD%BD-%E7%94%A8frp%E6%89%93%E5%BC%80%E4%B8%80%E6%89%87%E9%80%9A%E5%90%91%E5%86%85%E7%BD%91%E7%9A%84%E9%97%A8/">用frp打开一扇通向内网的门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;服务器的硬件配置和使用注意&quot;&gt;&lt;a href=&quot;#服务器的硬件配置和使用注意&quot; class=&quot;headerlink&quot; title=&quot;服务器的硬件配置和使用注意&quot;&gt;&lt;/a&gt;服务器的硬件配置和使用注意&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;GPU：GTX1080TI AERO 1
      
    
    </summary>
    
      <category term="服务器运维" scheme="https://geniuslight.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://geniuslight.github.io/tags/Linux/"/>
    
      <category term="运维" scheme="https://geniuslight.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>vncserver多用户启动</title>
    <link href="https://geniuslight.github.io/2018/03/13/vncserver%E5%A4%9A%E7%94%A8%E6%88%B7%E5%90%AF%E5%8A%A8/"/>
    <id>https://geniuslight.github.io/2018/03/13/vncserver多用户启动/</id>
    <published>2018-03-12T20:01:51.000Z</published>
    <updated>2018-03-12T23:38:56.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="管理多个用户"><a href="#管理多个用户" class="headerlink" title="管理多个用户"></a>管理多个用户</h1><h2 id="使用su指令（py脚本中使用）"><a href="#使用su指令（py脚本中使用）" class="headerlink" title="使用su指令（py脚本中使用）"></a>使用su指令（py脚本中使用）</h2><p>[root@www ~]# su [-lm][-c 指令] [username]<br>选项与参数：</p><p>-  ：单纯使用 - 如‘ su - ’代表使用 login-shell 的变数档案读取方式来登入系统；</p><p>若使用者名称没有加上去，则代表切换为 root 的身份。<br>-l  ：与 - 类似，但后面需要加欲切换的使用者帐号！也是 login-shell 的方式。<br>-m  ：-m 与 -p 是一样的，表示‘使用目前的环境设定，而不读取新使用者的设定档’<br>-c  ：仅进行一次指令，所以 -c 后面可以加上指令喔！</p><h2 id="使用脚本管理多用户"><a href="#使用脚本管理多用户" class="headerlink" title="使用脚本管理多用户"></a>使用脚本管理多用户</h2><p>在/etc/文件下，新建vncserver文件夹，在vncserver文件夹下新增两个文件startvnc.py和startvnc.sh,两个文件内容分别为：</p><p>startvnc.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line">  </span><br><span class="line">user_list=[<span class="string">"wst"</span>,<span class="string">"nju_zhao"</span>,<span class="string">"xuxudong"</span>,<span class="string">"visitor"</span>,<span class="string">"shaoyidi"</span>] </span><br><span class="line"><span class="comment">#不同用户</span></span><br><span class="line">i = <span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line">depth = <span class="string">"16"</span>  </span><br><span class="line">  </span><br><span class="line">geometry_list = [<span class="string">"1920x1080"</span>, <span class="string">"1920x1080"</span>, <span class="string">"1920x1080"</span>, <span class="string">"1920x1080"</span>, <span class="string">"2880x1800"</span>] </span><br><span class="line"><span class="comment">#不同分辨率</span></span><br><span class="line">  </span><br><span class="line">name = <span class="string">"vncserver"</span>  </span><br><span class="line"></span><br><span class="line">user_config = zip(user_list, geometry_list)</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建不同用户和对应端口的指令</span></span><br><span class="line"><span class="keyword">for</span> name, geometry <span class="keyword">in</span> user_config:  </span><br><span class="line">    options = <span class="string">"-name %s -depth %s -geometry %s :%d"</span> % (name, depth, geometry, i)  </span><br><span class="line">    print(options)  </span><br><span class="line">    i = i + <span class="number">1</span>  </span><br><span class="line">    cmd = <span class="string">"su %s -c '/usr/bin/vncserver %s'"</span> % (name, options)  </span><br><span class="line">    print(cmd)  </span><br><span class="line">    os.system(cmd)</span><br></pre></td></tr></table></figure><p>startvnc.sh:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">python /etc/vncserver/startvnc.py  </span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h1 id="添加开机执行"><a href="#添加开机执行" class="headerlink" title="添加开机执行"></a>添加开机执行</h1><p>给文件执行权限</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chmod</span> + <span class="selector-tag">x</span>  <span class="selector-tag">startvnc</span><span class="selector-class">.sh</span></span><br></pre></td></tr></table></figure><p>将命令添加到/etc/rc.local的末尾，以执行文件，添加内容为</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sh</span> /etc/vncserver/startvnc.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p><a href="http://blog.csdn.net/w113691/article/details/78407779" target="_blank" rel="noopener">参考：Ubuntu 14.04 解决VNC server 自启动</a></p><p><a href="https://doc.plob.org/vbird_linux/" target="_blank" rel="noopener">参考：鸟哥的linux私房菜</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;管理多个用户&quot;&gt;&lt;a href=&quot;#管理多个用户&quot; class=&quot;headerlink&quot; title=&quot;管理多个用户&quot;&gt;&lt;/a&gt;管理多个用户&lt;/h1&gt;&lt;h2 id=&quot;使用su指令（py脚本中使用）&quot;&gt;&lt;a href=&quot;#使用su指令（py脚本中使用）&quot; class
      
    
    </summary>
    
      <category term="服务器运维" scheme="https://geniuslight.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://geniuslight.github.io/tags/Linux/"/>
    
      <category term="运维" scheme="https://geniuslight.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>nova服务器管理</title>
    <link href="https://geniuslight.github.io/2018/03/09/nova%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%A1%E7%90%86/"/>
    <id>https://geniuslight.github.io/2018/03/09/nova服务器管理/</id>
    <published>2018-03-08T17:00:42.000Z</published>
    <updated>2018-03-12T23:51:31.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器的硬件配置和使用注意"><a href="#服务器的硬件配置和使用注意" class="headerlink" title="服务器的硬件配置和使用注意"></a>服务器的硬件配置和使用注意</h1><ul><li>GPU：GTX1080TI AERO 11G 2块</li><li>CPU：Intel E5-2650V4</li><li>内存：DDR4 RECC 2133 16G</li><li>硬盘：机械硬盘 4T</li></ul><p>使用时候个人觉得要注意：</p><ul><li>先观察GPU有没有人在使用，如果贸然使用，可能会杀死别人在跑的程序</li><li>安装软件，注意选择版本，比如tensorfolw不同版本对cuda和cudnn的版本要求不一样，一般会根据cuda来安装相应版本的深度学习框架</li><li>谨慎使用root权限，可以的话，使用普通用户权限</li><li>能不重启服务器，就不要重启，重启是使用<strong>who</strong>和<strong>ps aux</strong> 指令，查看最近用户登入时间和程序运行</li><li>python使用的时候，使用virtualenv，anaconda等工具，管理好包的安装</li></ul><h1 id="服务器连接"><a href="#服务器连接" class="headerlink" title="服务器连接"></a>服务器连接</h1><h2 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h2><p>使用ssh连接，没有界面，但是会十分流畅</p><p>在windows上，可以使用软件进行管理连接，比如说<a href="https://www.netsarang.com/products/xsh_overview.html" target="_blank" rel="noopener">xshell</a></p><p>在linux上，可以在终端之间输入：ssh 用户名@IP地址</p><p>使用的都是默认端口22，如果你需要，可以自己改端口</p><h2 id="vnc连接"><a href="#vnc连接" class="headerlink" title="vnc连接"></a>vnc连接</h2><p>使用vnc连接，可以使用界面</p><p>服务器的<a href="https://geniuslight.github.io/2017/12/20/%E7%99%BB%E9%99%86%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A1%8C%E9%9D%A2/">vnc安装过程</a>(读一下有助于更好使用！)</p><p>widows和linux都可以下载<a href="https://www.realvnc.com/en/connect/download/viewer/" target="_blank" rel="noopener">客户端</a> 。使用十分简单，但是在网络不是很畅通的时候，会比较卡。</p><p>anaconda3中有dbus-launch，会和vnc桌面发生冲突，可能导致终端无法打开，所以不要把anacoda3的path添加到环境变量中。</p><h3 id="管理vnc账号和自动登陆"><a href="#管理vnc账号和自动登陆" class="headerlink" title="管理vnc账号和自动登陆"></a>管理vnc账号和自动登陆</h3><p>参看教程： <a href="https://geniuslight.github.io/2018/03/13/vncserver%E5%A4%9A%E7%94%A8%E6%88%B7%E5%90%AF%E5%8A%A8/">vncserver多用户启动</a></p><h2 id="在外网使用服务器"><a href="#在外网使用服务器" class="headerlink" title="在外网使用服务器"></a>在外网使用服务器</h2><p>参看教程：<a href="https://geniuslight.github.io/2018/01/30/%E8%BD%AC%E8%BD%BD-%E7%94%A8frp%E6%89%93%E5%BC%80%E4%B8%80%E6%89%87%E9%80%9A%E5%90%91%E5%86%85%E7%BD%91%E7%9A%84%E9%97%A8/">用frp打开一扇通向内网的门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;服务器的硬件配置和使用注意&quot;&gt;&lt;a href=&quot;#服务器的硬件配置和使用注意&quot; class=&quot;headerlink&quot; title=&quot;服务器的硬件配置和使用注意&quot;&gt;&lt;/a&gt;服务器的硬件配置和使用注意&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;GPU：GTX1080TI AERO 1
      
    
    </summary>
    
      <category term="服务器运维" scheme="https://geniuslight.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://geniuslight.github.io/tags/Linux/"/>
    
      <category term="运维" scheme="https://geniuslight.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>opencv-python实现图像色彩空间转换</title>
    <link href="https://geniuslight.github.io/2018/02/01/opencv-python%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%83%8F%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
    <id>https://geniuslight.github.io/2018/02/01/opencv-python实现图像色彩空间转换/</id>
    <published>2018-02-01T07:18:41.000Z</published>
    <updated>2018-02-01T07:42:16.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="opencv自带RGB-↔-GRAY"><a href="#opencv自带RGB-↔-GRAY" class="headerlink" title="opencv自带RGB ↔ GRAY"></a>opencv自带RGB ↔ GRAY</h2><p>Transformations within RGB space like adding/removing the alpha channel, reversing the channel order, conversion to/from 16-bit RGB color (R5:G6:B5 or R5:G5:B5), as well as conversion to/from grayscale using:</p><p>RGB[A] to Gray:Y←0.299⋅R+0.587⋅G+0.114⋅B<br>and</p><p>Gray to RGB[A]:R←Y,G←Y,B←Y,A←max(ChannelRange)<br>The conversion from a RGB image to gray is done with:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>cvtColor(src, bwsrc, cv::COLOR_RGB2GRAY);</span><br></pre></td></tr></table></figure><p><a href="https://docs.opencv.org/3.1.0/de/d25/imgproc_color_conversions.html" target="_blank" rel="noopener">转化算法详细</a></p><h3 id="Changing-Color-space"><a href="#Changing-Color-space" class="headerlink" title="Changing Color-space"></a>Changing Color-space</h3><p>There are more than 150 color-space conversion methods available in OpenCV. But we will look into only two which are most widely used ones, BGR↔ Gray and BGR ↔ HSV.</p><p>For color conversion, we use the function <code>cv2.cvtColor(input_image, flag)</code> where <code>flag</code> determines the type of conversion.</p><p>For BGR –&gt;Gray conversion we use the flags <code>cv2.COLOR_BGR2GRAY</code>. Similarly for BGR –&gt; HSV, we use the flag <code>cv2.COLOR_BGR2HSV</code>. To get other flags, just run following commands in your Python terminal :</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">flags = [<span class="selector-tag">i</span> <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> dir(cv2) <span class="keyword">if</span> <span class="selector-tag">i</span>.startswith(<span class="string">'COLOR_'</span>)]</span><br><span class="line">print flags</span><br></pre></td></tr></table></figure><p><strong>Note</strong></p><p>For HSV, Hue range is [0,179], Saturation range is [0,255] and Value range is [0,255]. Different softwares use different scales. So if you are comparing OpenCV values with them, you need to normalize these ranges.</p><p>ps. 此处使用的是cv2,cv不含COLOR_BGR2GRAY，但是有类似方法</p><h3 id="Object-Tracking-示例"><a href="#Object-Tracking-示例" class="headerlink" title="Object Tracking(示例)"></a>Object Tracking(示例)</h3><p>Now we know how to convert BGR image to HSV, we can use this to extract a colored object. In HSV, it is more easier to represent a color than RGB color-space. In our application, we will try to extract a blue colored object. So here is the method:</p><blockquote><ul><li>Take each frame of the video</li><li>Convert from BGR to HSV color-space</li><li>We threshold the HSV image for a range of blue color</li><li>Now extract the blue object alone, we can do whatever on that image we want.</li></ul></blockquote><p>Below is the code which are commented in detail :</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">import</span> cv2</span><br><span class="line"><span class="built_in">import</span> numpy as np</span><br><span class="line"></span><br><span class="line"><span class="attr">cap</span> = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">while(<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># Take each frame</span></span><br><span class="line">    _, <span class="attr">frame</span> = cap.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Convert BGR to HSV</span></span><br><span class="line">    <span class="attr">hsv</span> = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># define range of blue color in HSV</span></span><br><span class="line">    <span class="attr">lower_blue</span> = np.array([<span class="number">110</span>,<span class="number">50</span>,<span class="number">50</span>])</span><br><span class="line">    <span class="attr">upper_blue</span> = np.array([<span class="number">130</span>,<span class="number">255</span>,<span class="number">255</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Threshold the HSV image to get only blue colors</span></span><br><span class="line">    <span class="attr">mask</span> = cv2.inRange(hsv, lower_blue, upper_blue)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Bitwise-AND mask and original image</span></span><br><span class="line">    <span class="attr">res</span> = cv2.bitwise_and(frame,frame, <span class="attr">mask=</span> mask)</span><br><span class="line"></span><br><span class="line">    cv2.imshow('frame',frame)</span><br><span class="line">    cv2.imshow('mask',mask)</span><br><span class="line">    cv2.imshow('res',res)</span><br><span class="line">    <span class="attr">k</span> = cv2.waitKey(<span class="number">5</span>) &amp; <span class="number">0</span>xFF</span><br><span class="line">    <span class="keyword">if</span> <span class="attr">k</span> == <span class="number">27</span>:</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>Below image shows tracking of the blue object:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://opencv-python-tutroals.readthedocs.io/en/latest/_images/frame.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="转载-使用伪色彩映射的方法进行转化"><a href="#转载-使用伪色彩映射的方法进行转化" class="headerlink" title="[转载]使用伪色彩映射的方法进行转化"></a>[转载]使用伪色彩映射的方法进行转化</h2><p>转载自：</p><p><a href="http://blog.csdn.net/yhl_leo/article/details/52163236" target="_blank" rel="noopener">http://blog.csdn.net/yhl_leo/article/details/52163236</a></p><p>在实验过程中，经常见到别人实验中展现的酷炫多彩的分割图或者概率图的伪彩色图，如随意生成一张概率图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20160809153336613" alt="gray" title="">                </div>                <div class="image-caption">gray</div>            </figure><p>大家都知道人眼对灰度的识别能力远差于彩色的识别能力，这灰蒙蒙的是什么鬼…</p><p>可以使用OpenCV的<code>applyColorMap</code>对图像进行颜色渲染，生成伪彩色图像：</p><p><strong>C++</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/contrib/contrib.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace cv<span class="comment">; </span></span><br><span class="line"></span><br><span class="line">Mat im_gray = imread(<span class="string">"pluto.jpg"</span>, IMREAD_GRAYSCALE)<span class="comment">;</span></span><br><span class="line">Mat im_color<span class="comment">;</span></span><br><span class="line">applyColorMap(im_gray, im_color, COLORMAP_HSV)<span class="comment">;123456789</span></span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import cv2 </span><br><span class="line"></span><br><span class="line">im_gray = cv2.imread(<span class="string">"pluto.jpg"</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">im_color = cv2.applyColorMap(im_gray, cv2.COLORMAP_HSV)1234</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20160809155500456" alt="color" title="">                </div>                <div class="image-caption">color</div>            </figure><p>可以看出，伪彩色图中展现的信息更多。</p><p>OpenCV定义了12种<code>COLORMAP_*.</code>可以产生这样的</p><table><thead><tr><th><strong>Value</strong></th><th><strong>Name</strong></th><th><strong>Scale</strong></th></tr></thead><tbody><tr><td>0</td><td><strong>COLORMAP_AUTUMN</strong></td><td><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.learnopencv.com/wp-content/uploads/2015/07/colorscale_autumn.jpg" alt="colorscale_autumn" title="">                </div>                <div class="image-caption">colorscale_autumn</div>            </figure></td></tr><tr><td>1</td><td><strong>COLORMAP_BONE</strong></td><td><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.learnopencv.com/wp-content/uploads/2015/07/colorscale_bone.jpg" alt="colorscale_bone" title="">                </div>                <div class="image-caption">colorscale_bone</div>            </figure></td></tr><tr><td>2</td><td><strong>COLORMAP_JET</strong></td><td><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.learnopencv.com/wp-content/uploads/2015/07/colorscale_jet.jpg" alt="colorscale_jet" title="">                </div>                <div class="image-caption">colorscale_jet</div>            </figure></td></tr><tr><td>3</td><td><strong>COLORMAP_WINTER</strong></td><td><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.learnopencv.com/wp-content/uploads/2015/07/colorscale_winter.jpg" alt="colorscale_winter" title="">                </div>                <div class="image-caption">colorscale_winter</div>            </figure></td></tr><tr><td>4</td><td><strong>COLORMAP_RAINBOW</strong></td><td><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.learnopencv.com/wp-content/uploads/2015/07/colorscale_rainbow.jpg" alt="colorscale_rainbow" title="">                </div>                <div class="image-caption">colorscale_rainbow</div>            </figure></td></tr><tr><td>5</td><td><strong>COLORMAP_OCEAN</strong></td><td><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.learnopencv.com/wp-content/uploads/2015/07/colorscale_ocean.jpg" alt="colorscale_ocean" title="">                </div>                <div class="image-caption">colorscale_ocean</div>            </figure></td></tr><tr><td>6</td><td><strong>COLORMAP_SUMMER</strong></td><td><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.learnopencv.com/wp-content/uploads/2015/07/colorscale_summer.jpg" alt="colorscale_summer" title="">                </div>                <div class="image-caption">colorscale_summer</div>            </figure></td></tr><tr><td>7</td><td><strong>COLORMAP_SPRING</strong></td><td><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.learnopencv.com/wp-content/uploads/2015/07/colorscale_spring.jpg" alt="colorscale_spring" title="">                </div>                <div class="image-caption">colorscale_spring</div>            </figure></td></tr><tr><td>8</td><td><strong>COLORMAP_COOL</strong></td><td><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.learnopencv.com/wp-content/uploads/2015/07/colorscale_cool.jpg" alt="colorscale_cool" title="">                </div>                <div class="image-caption">colorscale_cool</div>            </figure></td></tr><tr><td>9</td><td><strong>COLORMAP_HSV</strong></td><td><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.learnopencv.com/wp-content/uploads/2015/07/colorscale_hsv.jpg" alt="colorscale_hsv" title="">                </div>                <div class="image-caption">colorscale_hsv</div>            </figure></td></tr><tr><td>10</td><td><strong>COLORMAP_PINK</strong></td><td><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.learnopencv.com/wp-content/uploads/2015/07/colorscale_pink.jpg" alt="colorscale_pink" title="">                </div>                <div class="image-caption">colorscale_pink</div>            </figure></td></tr><tr><td>11</td><td><strong>COLORMAP_HOT</strong></td><td><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.learnopencv.com/wp-content/uploads/2015/07/colorscale_hot.jpg" alt="colorscale_hot" title="">                </div>                <div class="image-caption">colorscale_hot</div>            </figure></td></tr></tbody></table><hr><p>此外，还可以自己定义一个颜色查询图，将灰度值0-255分别映射到对应的256种颜色上，在OpenCV中，可以创建一个256x1的彩色图，存储着预先定义的256种彩色值，通过使用<code>LUT</code>函数将彩色值映射到灰度图像上：</p><p><strong>C++</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mat im_color;</span><br><span class="line">// NOTE : <span class="type">im_gray</span> <span class="keyword">is</span> <span class="number">3</span>-channel image <span class="keyword">with</span> identical </span><br><span class="line">// red, green, blue channels.  </span><br><span class="line">LUT(im_gray, lut, im_color);<span class="number">1234</span></span><br></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NOTE : im_gray is 3-channel image with identical</span></span><br><span class="line"><span class="comment"># red, green, blue channels.  </span></span><br><span class="line"><span class="attr">im_color</span> = cv2.LUT(im_gray, lut)<span class="number">123</span></span><br></pre></td></tr></table></figure><p>其中，对于多通道的输入，参数<code>lut</code>的通道数可以为1或者与输入图像的通道数相同。</p><p>附上一张OpenCV提供的12种样式表的示例图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.learnopencv.com/wp-content/uploads/2015/07/colormap_opencv_example.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>参考：</p><ul><li><a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_colorspaces/py_colorspaces.html?highlight=cvtcolor" target="_blank" rel="noopener">Changing Colorspaces</a></li><li><a href="https://docs.opencv.org/3.1.0/de/d25/imgproc_color_conversions.html" target="_blank" rel="noopener">Color conversions</a></li><li>OpenCV docs: <a href="http://docs.opencv.org/2.4/modules/contrib/doc/facerec/colormaps.html" target="_blank" rel="noopener">applyColorMap</a></li><li>OpenCV docs: <a href="http://docs.opencv.org/2.4/modules/core/doc/operations_on_arrays.html?highlight=lut#cv2.LUT" target="_blank" rel="noopener">LUT</a></li><li>Learn OpenCV: <a href="http://www.learnopencv.com/applycolormap-for-pseudocoloring-in-opencv-c-python/" target="_blank" rel="noopener">applyColorMap for pseudocoloring in OpenCV</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;opencv自带RGB-↔-GRAY&quot;&gt;&lt;a href=&quot;#opencv自带RGB-↔-GRAY&quot; class=&quot;headerlink&quot; title=&quot;opencv自带RGB ↔ GRAY&quot;&gt;&lt;/a&gt;opencv自带RGB ↔ GRAY&lt;/h2&gt;&lt;p&gt;Transf
      
    
    </summary>
    
      <category term="图像处理" scheme="https://geniuslight.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="图像处理" scheme="https://geniuslight.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="opencv" scheme="https://geniuslight.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>opencv-python读取和写入tiff图像</title>
    <link href="https://geniuslight.github.io/2018/02/01/opencv-python%E8%AF%BB%E5%8F%96%E5%92%8C%E5%86%99%E5%85%A5tiff%E5%9B%BE%E5%83%8F/"/>
    <id>https://geniuslight.github.io/2018/02/01/opencv-python读取和写入tiff图像/</id>
    <published>2018-02-01T07:04:10.000Z</published>
    <updated>2018-02-01T07:42:17.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tiff图像介绍"><a href="#Tiff图像介绍" class="headerlink" title="Tiff图像介绍"></a>Tiff图像介绍</h2><p><strong>标签图像文件格式</strong>（<strong>Tagged Image File Format</strong>，简写为<strong>TIFF</strong>）是一种灵活的位图格式，主要用来存储包括照片和艺术图在内的图像。</p><p>TIFF是一个灵活适应性强的文件格式。通过在文件标头中使用“标签”，它能够在一个文件中处理多幅图像和数据。标签能够标明图像的如图像大小这样的基本几何尺寸，或者定义图像数据是如何排列的，或者是否使用了各种各样的图像压缩选项。例如，TIFF可以包含JPEG和进程长度编码压缩的图像。TIFF文件也可以包含基于矢量的裁剪区域（剪切或者构成主体图像的轮廓）。使用无损格式存储图像的能力使TIFF文件成为图像存档的有效方法。与JPEG不同，TIFF文件可以编辑然后重新存储而不会有压缩损失。其它的一些TIFF文件选项包括多层或者多页。</p><h2 id="opencv读取图像"><a href="#opencv读取图像" class="headerlink" title="opencv读取图像"></a>opencv读取图像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">cv2.imread(<span class="string">"filename"</span>,flags)</span><br></pre></td></tr></table></figure><p>对于cv2，imread的关于通道数和位深的flags有五种选择：</p><blockquote><p>IMREAD_UNCHANGED = -1#不进行转化，比如保存为了16位的图片，读取出来仍然为16位。<br>IMREAD_GRAYSCALE = 0#进行转化为灰度图，比如保存为了16位的图片，读取出来为8位，类型为CV_8UC1。<br>IMREAD_COLOR = 1#进行转化为RGB三通道图像，图像深度转为8位<br>IMREAD_ANYDEPTH = 2#保持图像深度不变，进行转化为灰度图。<br>IMREAD_ANYCOLOR = 4#若图像通道数小于等于3，则保持原通道数不变；若通道数大于3则只取取前三个通道。图像深度转为8位</p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>不转化读取，图像通道和数据类型都不会变</p><p>不转化读取，tiff图像保存为其他图像，则数据类型可能改变</p><p>不转化读取，tiff保持为tiff图像，则不发生改变</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">img_path = <span class="string">'s1a-iw-grd-vh-20150823t221233-20150823t221258-007396-00a2ca-002'</span></span><br><span class="line"></span><br><span class="line">img_list = os.listdir(img_path)</span><br><span class="line"><span class="keyword">for</span> img_name <span class="keyword">in</span> img_list:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'.tiff'</span> <span class="keyword">in</span> img_name:</span><br><span class="line">        #保持不变读取</span><br><span class="line">        <span class="selector-tag">img</span> = cv2.imread(os<span class="selector-class">.path</span><span class="selector-class">.join</span>(img_path, img_name), -<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'不进行转化读取'</span>)</span><br><span class="line">        print(<span class="selector-tag">img</span>.dtype)</span><br><span class="line">        print(<span class="selector-tag">img</span>.shape)</span><br><span class="line">        #默认读取方式</span><br><span class="line">        <span class="selector-tag">img</span> = cv2.imread(os<span class="selector-class">.path</span><span class="selector-class">.join</span>(img_path, img_name))</span><br><span class="line">        print(<span class="string">'进行转换读取'</span>)</span><br><span class="line">        print(<span class="selector-tag">img</span>.dtype)</span><br><span class="line">        print(<span class="selector-tag">img</span>.shape)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'.jpg'</span> <span class="keyword">in</span> img_name:</span><br><span class="line">        #上述文件保存为jpg后读取</span><br><span class="line">        <span class="selector-tag">img</span> = cv2.imread(os<span class="selector-class">.path</span><span class="selector-class">.join</span>(img_path, img_name), -<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'不进行转化读取后保存为jpg，不进行转化读取（此处保存完成，直接读取）'</span>)</span><br><span class="line">        print(<span class="selector-tag">img</span>.dtype)</span><br><span class="line">        print(<span class="selector-tag">img</span>.shape)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">不进行转化读取后保存为jpg，不进行转化读取（此处保存完成，直接读取）</span><br><span class="line">uint8</span><br><span class="line">(<span class="number">448</span>, <span class="number">448</span>)</span><br><span class="line">不进行转化读取</span><br><span class="line">uint16</span><br><span class="line">(<span class="number">448</span>, <span class="number">448</span>)</span><br><span class="line">进行转换读取</span><br><span class="line">uint8</span><br><span class="line">(<span class="number">448</span>, <span class="number">448</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Tiff图像介绍&quot;&gt;&lt;a href=&quot;#Tiff图像介绍&quot; class=&quot;headerlink&quot; title=&quot;Tiff图像介绍&quot;&gt;&lt;/a&gt;Tiff图像介绍&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;标签图像文件格式&lt;/strong&gt;（&lt;strong&gt;Tagged Image
      
    
    </summary>
    
      <category term="图像处理" scheme="https://geniuslight.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="图像处理" scheme="https://geniuslight.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="opencv" scheme="https://geniuslight.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>[转载]用frp打开一扇通向内网的门</title>
    <link href="https://geniuslight.github.io/2018/01/30/%E8%BD%AC%E8%BD%BD-%E7%94%A8frp%E6%89%93%E5%BC%80%E4%B8%80%E6%89%87%E9%80%9A%E5%90%91%E5%86%85%E7%BD%91%E7%9A%84%E9%97%A8/"/>
    <id>https://geniuslight.github.io/2018/01/30/转载-用frp打开一扇通向内网的门/</id>
    <published>2018-01-30T08:40:30.000Z</published>
    <updated>2018-01-30T08:47:24.001Z</updated>
    
    <content type="html"><![CDATA[<p>如何在广域网访问校园内网里的服务呢？我们需要一个叫做frp工具为我们进行反向代理。那么反向代理是如何工作的呢？首先，我们需要一个处在公网之中有公网IP的主机，装好frp服务的内网服务器会每隔一段时间就向远程主机发送一个数据包，这样在路由器中就始终会有一个端口分配给这个内网服务器，外网主机可以随时通过这条连接向内网的服务器发送数据。当我们在广域网访问内网服务器的时候，我们的请求会先发送给我们处在外网的主机，当这台主机接收到了数据，就会转发这个数据包给内网的服务器，服务器中运行的程序接收到了这个数据包，又会转发给指定的端口，所以，我们的访问就这样转发给了内网的服务器。服务器发送的数据包也通过这种途径转发给了外网的访问者，从而实现了外网访问内网的功能。</p><p>下面我们就具体谈一谈如何快速部署frp服务。</p><p>细节参见<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">github文档</a></p><h2 id="网主机端（server）："><a href="#网主机端（server）：" class="headerlink" title="网主机端（server）："></a>网主机端（server）：</h2><p>首先，你需要有一台外网主机，比如VPS，这里的东西就不赘述了。</p><p> 接着，我们通过ssh登陆主机，执行以下命令:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/clangcn/onekey-install-<span class="keyword">shell</span>/master/frps/install-frps.<span class="keyword">sh</span> -O ./install-frps.<span class="keyword">sh</span></span><br><span class="line">chmod <span class="number">700</span> ./install-frps.<span class="keyword">sh</span></span><br><span class="line">./install-frps.<span class="keyword">sh</span> install</span><br></pre></td></tr></table></figure><p>然后按要求填写参数</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Loading network version for frps, please wait...frps Latest release file frp_0<span class="number">.8</span><span class="number">.1</span>_linux_amd64.tar.gz    </span><br><span class="line">#此步骤会自动获取frp最新版本，自动操作，无需理会</span><br><span class="line">Loading You Server IP, please wait...You Server IP:<span class="number">12.12</span><span class="number">.12</span><span class="number">.12</span>                                           </span><br><span class="line">#自动获取你服务器的IP地 </span><br><span class="line">Please input your server setting:Please input frps bind_port [<span class="number">1</span><span class="number">-65535</span>](Default Server Port: <span class="number">5443</span>):      </span><br><span class="line">#输入frp提供服务的端口，用于服务器端和客户端通信</span><br><span class="line">Please input frps dashboard_port [<span class="number">1</span><span class="number">-65535</span>](Default dashboard_port: <span class="number">6443</span>): </span><br><span class="line">#输入frp的控制台服务端口，用于查看frp工作状态</span><br><span class="line">Please input frps vhost_http_port [<span class="number">1</span><span class="number">-65535</span>](Default vhost_http_port: <span class="number">80</span>):  </span><br><span class="line">#输入frp进行http穿透的http服务端口Please input frps vhost_https_port [<span class="number">1</span><span class="number">-65535</span>](Default vhost_https_port: <span class="number">443</span>): </span><br><span class="line">#输入frp进行https穿透的https服务端口Please input privilege_token (Default: WEWLRgwRjIJVPx2kuqzkGnvuftPLQniq): </span><br><span class="line">#输入frp服务器和客户端通信的密码，默认是随机生成的Please input frps max_pool_count [<span class="number">1</span><span class="number">-200</span>](Default max_pool_count: <span class="number">50</span>): </span><br><span class="line">#设置每个代理可以创建的连接池上限，默认<span class="number">50</span></span><br><span class="line">Please select log_level #####</span><br><span class="line"><span class="number">1</span>: info</span><br><span class="line"><span class="number">2</span>: warn</span><br><span class="line"><span class="number">3</span>: error</span><br><span class="line"><span class="number">4</span>: debug</span><br><span class="line">############################</span><br><span class="line">Enter your choice (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> or exit. default [<span class="number">1</span>]):</span><br><span class="line">#设置日志等级，<span class="number">4</span>个选项，默认是info</span><br><span class="line">Please input frps log_max_days [<span class="number">1</span><span class="number">-30</span>](Default log_max_days: <span class="number">3</span> day):</span><br><span class="line">#设置日志保留天数，范围是<span class="number">1</span>到<span class="number">30</span>天，默认保留<span class="number">3</span>天。</span><br><span class="line">##### Please select log_file #####</span><br><span class="line"><span class="number">1</span>: enable</span><br><span class="line"><span class="number">2</span>: disable</span><br><span class="line">#####################################################</span><br><span class="line">Enter your choice (<span class="number">1</span>, <span class="number">2</span> or exit. default [<span class="number">1</span>]):</span><br><span class="line">#设置是否开启日志记录，默认开启，开启后日志等级及保留天数生效，否则等级和保留天数无效</span><br></pre></td></tr></table></figure><p>设置完成后检查你的输入，如果没有问题按任意键继续安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">============== Check your input ==============</span><br><span class="line">You<span class="built_in"> Server IP </span>  : 12.12.12.12</span><br><span class="line">Bind<span class="built_in"> port </span>      : 5443</span><br><span class="line">Dashboard<span class="built_in"> port </span> : 6443</span><br><span class="line">vhost http<span class="built_in"> port </span>: 80</span><br><span class="line">vhost https port: 443</span><br><span class="line">Privilege token : WEWLRgwRjIJVPx2kuqzkGnvuftPLQniq</span><br><span class="line">Max<span class="built_in"> Pool </span>count  : 50</span><br><span class="line">Log level       : info</span><br><span class="line">Log max days    : 3</span><br><span class="line">Log file        : enable</span><br><span class="line">==============================================</span><br></pre></td></tr></table></figure><p>安装结束后显示：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Congratulations, frps install completed!</span><br><span class="line">==============================================</span><br><span class="line">You Server IP   : 12.12.12.12</span><br><span class="line">Bind port       : 5443</span><br><span class="line">Dashboard port  : 6443</span><br><span class="line">vhost http port : 80</span><br><span class="line">vhost https port: 443</span><br><span class="line">Privilege token : WEWLRgwRjIJVPx2kuqzkGnvuftPLQniq</span><br><span class="line">Max Pool count  : 50</span><br><span class="line">Log level       : info</span><br><span class="line">Log max days    : 3</span><br><span class="line">Log file        : enable           </span><br><span class="line"># 将上面信息添加到你的frp客户端中吧</span><br><span class="line">==============================================</span><br><span class="line">frps Dashboard: http://12.12.12.12:6443/   </span><br><span class="line">#  这个是frp控制台访问地址</span><br><span class="line">==============================================</span><br></pre></td></tr></table></figure><p>这里补充几条这个脚本的命令：</p><p>更新命令: <code>./install-frps.sh update</code></p><p>卸载命令: <code>./install-frps.sh uninstall</code></p><p>服务器端管理命令:</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frps &#123;start|<span class="type">stop</span>|<span class="type">restart</span>|<span class="type">status</span>|<span class="type">config</span>|<span class="type">version</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>Dashboard：</strong></p><p>通过浏览器查看 frp 的状态以及代理统计信息展示。打开浏览器通过 <code>http://[server_addr]:6443</code> 访问 dashboard 界面，用户名密码默认为 <code>admin</code>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/fatedier/frp/raw/master/doc/pic/dashboard.png" alt="dashboard" title="">                </div>                <div class="image-caption">dashboard</div>            </figure><h2 id="内网服务器端（client）："><a href="#内网服务器端（client）：" class="headerlink" title="内网服务器端（client）："></a>内网服务器端（client）：</h2><p>我们进入这个网页：<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases</a></p><p>找到适合我们服务器的安装包，下载到服务器中，假设我们下载amd64版的到了/home文件夹中</p><p>执行命令<code>cd /home</code></p><p>进入文件夹中，然后执行命令 <code>tar -zxvf frp_0.14.0_linux_amd64.tar.gz</code>进行解压</p><p>接着进入解压后的目录中<code>cd frp_0.14.0_linux_amd64</code></p><p>然后开始修改配置文件<code>vim frpc.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="comment">#填frp服务端的ip（也就是外网主机的IP）</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">5443</span></span><br><span class="line"><span class="comment">#填frp服务端的frp提供服务的端口</span></span><br><span class="line"><span class="attr">privilege_token</span> = WEWLRgwRjIJVPx2kuqzkGnvuftPLQniq</span><br><span class="line"><span class="comment">#填 frp服务器和客户端通信的密码</span></span><br><span class="line"><span class="attr">tcp_mux</span> = <span class="number">50</span>    </span><br><span class="line"><span class="comment">#与外网主机中“每个代理可以创建的连接池上限，默认50”项相同</span></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"><span class="comment">#remote_port`就是通过外网访问内网服务器ssh服务时的端口。</span></span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span>     </span><br><span class="line"><span class="comment">#内网服务器http服务的端口</span></span><br><span class="line"><span class="attr">custom_domains</span> = leanote.njunova.com    </span><br><span class="line"><span class="comment">#指向外网主机的域名</span></span><br></pre></td></tr></table></figure><p>官方的完整配置文件：<a href="https://github.com/fatedier/frp/blob/master/conf/frpc_full.ini" target="_blank" rel="noopener">https://github.com/fatedier/frp/blob/master/conf/frpc_full.ini</a></p><p>保存配置文件，执行命令</p><p><code>./frpc -c ./frpc.ini</code>启动frpc</p><h2 id="后台运行和自启动"><a href="#后台运行和自启动" class="headerlink" title="后台运行和自启动"></a>后台运行和自启动</h2><p><strong>使用nohup指令后台运行</strong></p><p>nohup指令的使用方法相对简单，只需要在<code>nohup</code>后面加上frp的运行指令即可。下面示范的指令是运行frp客户端。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup <span class="string">./frpc</span> -c <span class="string">./frpc.ini</span> &amp;</span><br></pre></td></tr></table></figure><p>这样就成功让frp在后台运行了。</p><p><strong>添加开机自启动</strong></p><p>由于服务端（外网主机端）使用了脚本安装，已经自动开启了自启动，所以我们只需要设置客户端（内网服务器）的开启自启。</p><p>比如你的frp目录在/home/frp</p><p>那么执行命令<code>nano /etc/rc.local</code>编辑自启动文件</p><p>在里面的 <code>exit 0</code>前一行加入 <code>sudo nohup /home/frp/frpc -c /home/frp/frpc.ini &amp;</code>就可以啦！</p><p>参考链接：</p><p><a href="http://leanote.njunova.com/blog/post/boss/%E7%94%A8frp%E6%89%93%E5%BC%80%E4%B8%80%E6%89%87%E9%80%9A%E5%90%91%E5%86%85%E7%BD%91%E7%9A%84%E9%97%A8" target="_blank" rel="noopener">文章原地址</a></p><p><a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">Github地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何在广域网访问校园内网里的服务呢？我们需要一个叫做frp工具为我们进行反向代理。那么反向代理是如何工作的呢？首先，我们需要一个处在公网之中有公网IP的主机，装好frp服务的内网服务器会每隔一段时间就向远程主机发送一个数据包，这样在路由器中就始终会有一个端口分配给这个内网服
      
    
    </summary>
    
      <category term="服务器运维" scheme="https://geniuslight.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://geniuslight.github.io/tags/Linux/"/>
    
      <category term="运维" scheme="https://geniuslight.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>遥感中几类处理数据的概念整理</title>
    <link href="https://geniuslight.github.io/2018/01/13/%E9%81%A5%E6%84%9F%E4%B8%AD%E5%87%A0%E7%B1%BB%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E7%9A%84%E6%A6%82%E5%BF%B5%E6%95%B4%E7%90%86/"/>
    <id>https://geniuslight.github.io/2018/01/13/遥感中几类处理数据的概念整理/</id>
    <published>2018-01-13T13:07:08.000Z</published>
    <updated>2018-01-13T13:13:02.995Z</updated>
    
    <content type="html"><![CDATA[<p>关于remote sensing（遥感）的一些概念整理，和其与深度学习发展的关系，阅读论文后对一些概念的整理。</p><p>处理数据有：</p><ul><li>高光谱图像</li><li>孔径雷达图像</li><li>高分辨率卫星图像</li></ul><p><a href="http://ieeexplore.ieee.org/document/8113128/" target="_blank" rel="noopener">英文摘要来自：Deep Learning in Remote Sensing: A Comprehensive Review and list of resources</a></p><h1 id="HYPERSPECTRAL-IMAGE（高光谱图像）"><a href="#HYPERSPECTRAL-IMAGE（高光谱图像）" class="headerlink" title="HYPERSPECTRAL IMAGE（高光谱图像）"></a>HYPERSPECTRAL IMAGE（高光谱图像）</h1><p><strong>介绍：</strong></p><p>高光谱影像(hyperspectral imaging)是收集及处理整个跨电磁波谱的信息。不像是人类的眼睛，只能接触到可见光。而高光谱的接触机制、比如虾蛄的眼睛它的光谱能够接触到红外线延伸到紫外线的范围。高光谱的能力能够使虾蛄分辨出不同的珊瑚、猎物，或则猎食者，而这些正是人类所缺少的。</p><p>工程师们已经制造出可用于农业、矿业、物理以及监控领域的传感器及处理系统。高光谱传感器通过大量的不同波段的电磁频谱来探测物体。实际物体会在电磁频谱中留下具有唯一的“指纹”。这些“指纹”被称为光谱特性并可用来确认被识别物体的组成成分。比如说，石油的光谱特性便可以用来帮助矿质学家们找到油田。</p><p><strong>优点：</strong></p><ul><li>光谱分辨率高、波段众多，能够获取地物几乎连续的光谱特征曲线，并可以根据需要选择或提取特定波段来突出目标特征</li><li>同一空间分辨率下，光谱覆盖范围更宽，能够探测到地物更多对电磁波的响应特征</li><li>波段多，为波段之间的相互校正提供了便利</li><li>定量化的连续光谱曲线数据为地物光谱机理模型引入图像分类提供了条件</li><li>包含丰富的辐射、空间和光谱信息，是多种信息的综合载体</li></ul><p><strong>缺点：</strong></p><ul><li>数据量大，图像包含几十个到上百个波段，数据量是单波段遥感图像的几百倍；数据存在大量冗余，处理不当，反而会影响分类精度</li><li>对高光谱图像的分类一方面要求更高的光谱定标和反射率转换的精度，另一方面又因为成像机理复杂，数据量巨大而导致对图像数据预处理困难，包括大气矫正、几何校正、光谱定标和反射率转换等</li><li>波段多、波段间的相关性高，因此分类需要的训练样本数目大大增多，往往因训练样本不足导致得到的训练参数不可靠(维数灾难)</li><li>针对常规遥感的处理模型和方法不能满足高光谱图像分类的需求。主要问题之一是统计学分类模型的参数估计问题，其对光谱特征的选择要求很高</li></ul><p><strong>相关发展：</strong></p><blockquote><p>Hyperspectral sensors are characterized by hundreds of narrow spectral<br>bands. This very high spectral resolution enables us to identify the materials<br>contained in the pixel via spectroscopic analysis. Analysis of hyperspectral    data is of great importance in many practical applications, such as land<br>cover/use classification or change and object detection. Because high-quality<br>hyperspectral satellite data are becoming available (e.g., via the launch of<br>EnMAP, planned for 2020, and the DESIS on the International Space Station, planned for 2018), hyperspectral image analysis has been one of the most active research areas within the remote-sensing community over the last decade. Inspired by the success of deep learning in computer vision, preliminary studies have been carried out on deep learning in hyperspectral data analysis, which brings new momentum to this field. </p></blockquote><p><strong>相关任务：</strong></p><ul><li>HYPERSPECTRAL IMAGE CLASSIFICATION </li><li>SAE FOR HYPERSPECTRAL DATA CLASSIFICATION </li><li>ANOMALY DETECTION </li></ul><h1 id="SYNTHETIC-APERTURE-RADAR-IMAGES（合成孔径雷达图像）"><a href="#SYNTHETIC-APERTURE-RADAR-IMAGES（合成孔径雷达图像）" class="headerlink" title="SYNTHETIC APERTURE RADAR IMAGES（合成孔径雷达图像）"></a>SYNTHETIC APERTURE RADAR IMAGES（合成孔径雷达图像）</h1><p><strong>介绍：</strong></p><p>合成孔径雷达（英语：synthetic aperture radar, SAR），又译成合成口径雷达，属于一种微波成像雷达，也是一种可以产生高分辨率图像的（航空）机载雷达或（太空）星载雷达。它在早期系使用透镜成像机制在底片（胶卷）上形成影像，目前则以复杂的雷达数据后处理方法来获得极窄的有效辐射波束（对产生的雷达图像意味着极高的空间分辨率）。它一般安装在移动的载体上对相对静止的目标成像，或反之。自合成孔径雷达发明以来，它被广泛的应用于遥感和地图测绘。</p><p><strong>优点：</strong></p><ul><li>All-day，全天24小时可以工作</li><li>All-weather，不受大雾或者云层影响</li><li>具有一定的穿透能力，比如穿透树木和建筑物</li></ul><p><strong>缺点：</strong></p><ul><li>精度不高，噪点较多</li><li>个别时候有可能收到电磁干扰</li><li>会受到大气和土壤湿度的影响，冰雪覆盖也有影响</li></ul><p><strong>相关发展：</strong></p><blockquote><p>Over the past several years, many studies related to deep learning for SAR image analysis have been published. Among these, deep learning techniques have been used most in typical applications, including automatic target recognition (ATR), terrain surface classification, and parameter inversion. </p></blockquote><p><strong>相关任务：</strong></p><p>AUTOMATIC TARGET RECOGNITION </p><p>TERRAIN SURFACE CLASSIFICATION </p><h1 id="HIGH-RESOLUTION-SATELLITE-IMAGES-（高分辨率图像）"><a href="#HIGH-RESOLUTION-SATELLITE-IMAGES-（高分辨率图像）" class="headerlink" title="HIGH-RESOLUTION SATELLITE IMAGES （高分辨率图像）"></a>HIGH-RESOLUTION SATELLITE IMAGES （高分辨率图像）</h1><p>没有找到确切的定义，不过顾名思义，应该是分辨率很高的卫星，在查阅过程中分辨率在0.41m-2.36m的应该都算高分辨率卫星。</p><p><strong>相关任务：</strong></p><ul><li>SCENE CLASSIFICATION</li><li>OBJECT DETECTION </li><li>IMAGE RETRIEVAL </li></ul><h1 id="延伸阅读："><a href="#延伸阅读：" class="headerlink" title="延伸阅读："></a>延伸阅读：</h1><ol><li><a href="https://www.zhihu.com/question/23004208" target="_blank" rel="noopener">遥感影像有什么缺点</a></li><li><a href="http://blog.csdn.net/u010976453/article/details/72416039" target="_blank" rel="noopener">高光谱遥感图像相关知识梳理大全</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于remote sensing（遥感）的一些概念整理，和其与深度学习发展的关系，阅读论文后对一些概念的整理。&lt;/p&gt;
&lt;p&gt;处理数据有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高光谱图像&lt;/li&gt;
&lt;li&gt;孔径雷达图像&lt;/li&gt;
&lt;li&gt;高分辨率卫星图像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="深度学习" scheme="https://geniuslight.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="遥感" scheme="https://geniuslight.github.io/tags/%E9%81%A5%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>RGB-D数据库介绍</title>
    <link href="https://geniuslight.github.io/2018/01/11/RGB-D%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%8B%E7%BB%8D/"/>
    <id>https://geniuslight.github.io/2018/01/11/RGB-D数据库介绍/</id>
    <published>2018-01-11T02:06:01.000Z</published>
    <updated>2018-01-11T03:04:44.674Z</updated>
    
    <content type="html"><![CDATA[<p>RGB图像和深度图像的数据库简介，简单介绍在论文中看到的数据库特点、使用的任务！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://nova.nju.edu.cn/f/831c067275b540e7b3fd/?dl=1" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>SUN RGB-D: A RGB-D Scene Understanding Benchmark Suite</strong></p><ul><li>10,335 RGB-D 图像</li><li>146,617个二维多边形和58,657个具有精确的物体方向的三维边界框，以及三维空间布局和场景类别</li><li>可使用任务：Scene Classification(场景理解)，Semantic Segmentation(语义分割)，3D  Object detection (3D物体检测)，Object Orientation(物体定位)，Room Layout Estimation(房间布局估计)，Total Scene Understanding(场景理解)</li></ul><p>链<a href="http://rgbd.cs.princeton.edu/" target="_blank" rel="noopener">接：http://rgbd.cs.princeton.edu/</a></p><p><strong>RGB-D (Kinect) Object Dataset-Washington</strong></p><p>分为两部分：物体数据库和场景数据库。</p><p>1.物体数据库</p><ul><li>41,877 RGB-D图像</li><li>300种物体，51类</li><li>可使用任务：物体分类</li></ul><p>2.场景数据库（这部分没有深入了解）</p><ul><li>14个场景，包括家具（椅子，咖啡，桌子， 沙发），和物体数据库中的一个子集，包括（碗， 杯子， 麦片盒， 咖啡马克杯， 汽水罐）。ps.不知道场景和物体有什么联系</li><li>3D点云图，相机相对每个场景位置，场景中包含物体的标记</li><li>可使用任务：Detection-based Object Labeling in 3D Scenes(物体检测)</li></ul><p><a href="https://rgbd-dataset.cs.washington.edu/index.html" target="_blank" rel="noopener">链接：https://rgbd-dataset.cs.washington.edu/index.html</a></p><p><strong>一个图像数据库的汇总，1019个链接，可以说非常强大了</strong></p><p>链<a href="http://homepages.inf.ed.ac.uk/rbf/CVonline/Imagedbase.htm#action" target="_blank" rel="noopener">接：http://homepages.inf.ed.ac.uk/rbf/CVonline/Imagedbase.htm#action</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RGB图像和深度图像的数据库简介，简单介绍在论文中看到的数据库特点、使用的任务！&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                   
      
    
    </summary>
    
      <category term="深度学习" scheme="https://geniuslight.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="https://geniuslight.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>建站记录</title>
    <link href="https://geniuslight.github.io/2017/12/20/%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    <id>https://geniuslight.github.io/2017/12/20/建站记录/</id>
    <published>2017-12-20T11:42:49.000Z</published>
    <updated>2017-12-20T11:44:49.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h1><p>记录成长的点点滴滴，给自己更多的思考时间！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;初衷&quot;&gt;&lt;a href=&quot;#初衷&quot; class=&quot;headerlink&quot; title=&quot;初衷&quot;&gt;&lt;/a&gt;初衷&lt;/h1&gt;&lt;p&gt;记录成长的点点滴滴，给自己更多的思考时间！&lt;/p&gt;

      
    
    </summary>
    
      <category term="随笔" scheme="https://geniuslight.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://geniuslight.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
